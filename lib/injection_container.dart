import 'package:get_it/get_it.dart';
import 'package:graphql_flutter/graphql_flutter.dart';
import 'package:injectable/injectable.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:path_provider/path_provider.dart'; // Required for HiveStore path
import 'package:chiragar_spacex_explore/core/config/app_config.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
// This is the generated file. It will be created after you run the build_runner command.
import 'injection_container.config.dart';

final getIt = GetIt.instance;

@InjectableInit(
  initializerName: r'$initGetIt', // default
  preferRelativeImports: true, // default
  asExtension: false, // default - set to true if you want to use getIt.get<Type>() as an extension
)
Future<void> configureDependencies() async {
  // --- External Dependencies ---

  // SharedPreferences
  // Used for simple key-value storage like theme preferences or favorites.
  final sharedPreferences = await SharedPreferences.getInstance();
  getIt.registerSingleton<SharedPreferences>(sharedPreferences);

  // GraphQL Client
  // The core client for making requests to the SpaceX GraphQL API.

  // 1. HTTP Link: Specifies the API endpoint.
  final HttpLink httpLink = HttpLink(AppConfig.graphQLEndpoint);

  // 2. Cache Store: For caching GraphQL responses.
  // HiveStore provides persistent caching, good for offline support.
  // It needs a path to store its data, obtained via path_provider.
  // Ensure Hive.initFlutter() is called in main.dart if not using graphql_flutter's init.
  // For graphql_flutter, initializing the store here is usually sufficient.

  final store = kIsWeb
      ? InMemoryStore()
      : await HiveStore.open(path: (await getApplicationDocumentsDirectory()).path);
  // Alternatively, for simpler in-memory caching (not for offline):
  // final store = InMemoryStore();

  final GraphQLClient client = GraphQLClient(
    link: httpLink,
    cache: GraphQLCache(store: store), // Use HiveStore for persistence
  );
  getIt.registerSingleton<GraphQLClient>(client);

  // --- Generated Injections ---
  // This function (generated by build_runner and injectable_generator)
  // will register all your @injectable annotated classes (BLoCs, UseCases, Repositories, DataSources).
  $initGetIt(getIt);
}